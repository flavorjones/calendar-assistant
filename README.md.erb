<%

libdir = File.join(File.dirname(__FILE__), "lib")
$LOAD_PATH.unshift(libdir) unless $LOAD_PATH.include?(libdir)

require 'calendar_assistant'

ENV["HOME"] = Dir.pwd
Encoding.default_external = Encoding::UTF_8

def print_predicates
  CalendarAssistant::Event::PREDICATES.each_with_object([]) do |(key,values), out|
    out << "* **#{key.capitalize}**"
    values.each do |value|
      out << "\t* `#{value.to_s.gsub(/\?$/,"")}`"
    end
  end.join("\n")
end

LOCAL_STORE_OPTION = " --local-store=fixtures.yml"

def obfuscate line
  line.
    gsub(LOCAL_STORE_OPTION, "").
    gsub(/#{ENV["HOME"]}.*\//, "/home/user/")
end

def run args
  STDERR.puts "â†’ calendar-assistant #{args}"

  output = []
  output << "<b>$</b> calendar-assistant #{args}" unless args =~ /\bhelp\b/

  args += LOCAL_STORE_OPTION unless args =~ /\bconfig|help\b/

  env = "env"
  env += " CA_HOME=#{Dir.pwd}"

  output += `#{env} ruby -Ilib bin/calendar-assistant #{args} | ansi-to-html`.split("\n")

  output.map {|line| obfuscate line }.join("\n")
end
%>
<img src="icons/calendar-assistant.png" align="right" />

# Calendar Assistant
>A command-line tool to help you manage your Google Calendar.

- easily join the videoconference for your current meeting
- see yours and others' "availability" suitable for an email response
- set up all-day events to let people know where you are (for frequent travelers)
- see views on your calendar events for a date or time range
- book (and re-book) one-on-ones and other meetings automatically

[![Gem Version](https://badge.fury.io/rb/calendar-assistant.svg)](https://badge.fury.io/rb/calendar-assistant)
[![Test suite](https://github.com/flavorjones/calendar-assistant/actions/workflows/test-suite.yml/badge.svg)](https://github.com/flavorjones/calendar-assistant/actions/workflows/test-suite.yml)
[![Maintainability](https://api.codeclimate.com/v1/badges/3525792e1feeccfd8875/maintainability)](https://codeclimate.com/github/flavorjones/calendar-assistant/maintainability)
[![Test Coverage](https://api.codeclimate.com/v1/badges/3525792e1feeccfd8875/test_coverage)](https://codeclimate.com/github/flavorjones/calendar-assistant/test_coverage)
[![Join the chat at https://gitter.im/flavorjones/calendar-assistant](https://badges.gitter.im/flavorjones/calendar-assistant.svg)](https://gitter.im/flavorjones/calendar-assistant?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

## Contents

<!-- toc -->


## Features

### Pretty Display in Your Terminal

Events are nicely formatted, with faint strikeouts for events you've declined, and some additional attributes listed when present (e.g., "awaiting", "self", "not-busy", "1:1" ...)


### Human-Friendly Date and Time Specification

All dates and times are interpreted by [Chronic](https://github.com/mojombo/chronic) and so can be fuzzy terms like "tomorrow", "tuesday", "next thursday", and "two days from now" as well as specific dates and times.

For a date range or a datetime range, split the start and end with `..` or `...` (with or without spaces) like:

* "tomorrow ... three days from now"
* "2018-09-24..2018-09-27".

Also note that every command will adopt an intelligent default, which is generally "today" or "now".


### Human-Friendly Duration Specification

Some duration-related preferences are interpreted by [ChronicDuration](https://github.com/henrypoydar/chronic_duration) and so can be terms like "10m", "30 minutes", "four hours", etc.

### Filter Events by property

Commands that return events like `show`, `join`, `availability`, `location` or `lint` can be filtered using the option `--must-be` or `--must-not-be`. These options expect a comma separated list of one of the following properties.

<%= print_predicates %>


### Preferences

All tokens and preferences will be stored in `~/.calendar-assistant` which is in TOML format for easy editing.

The location of `.calendar-assistant` defaults to the user's home directory. This location may be overridden by setting the environment variable `CA_HOME`


#### Nickname

Some commands, like `location-set`, will refer to you by nickname if you configure it (the alternative might be to not specify your name, or use your email id).

Set `nickname` to a string that would uniquely and briefly identify you to others, like "Mike D" or "JK".

#### Location Emoji

There is a `[settings]` key called `location-icon` that may be set to an emoji denoting a location event. By default CalendarAssistant will use `"ðŸŒŽ"`, but you can change this.


#### Command-Specific Preferences

If there are user preferences you'd like to set for just a single command (e.g., making public location events created via `location-set`), you can create a nested section in your TOML settings file, like so:

```toml
[settings]
visibility = "default"
nickname = "uniquely-me"

[settings.location_set]
visibility = "public"
calendars = ["teamcalendar@group.calendar.google.com","teamcalendar2@group.calendar.google.com"]
```


## Setup

### Installation

Install the gem: `gem install calendar-assistant`.


### Set up a Google Cloud Project with API access

<pre>
<%= run "help setup" %>
</pre>


### Authorize access to your Google Calendar

<pre>
<%= run "help authorize" %>
</pre>


## Commands

<pre>
<%= run "help" %>
</pre>


### `join`: Join a video call attached to a meeting

<pre>
<%= run "help join" %>
</pre>

Some examples:

<pre>
<b>$</b> calendar-assistant join
<i>me@example.com</i>

2018-10-01  11:30 - 12:00<b> | Facilitate customized web-readiness </b><i> (1:1, recurring)</i>

https://pivotal.zoom.us/j/ABC90210 <i># ... and opens the videoconference URL</i>


<b>$</b> calendar-assistant join work 11:30 --no-join
<i>me@example.com</i>

2018-10-01  11:30 - 12:00<b> | Facilitate customized web-readiness </b><i> (1:1, recurring)</i>

https://pivotal.zoom.us/j/ABC90210 <i># ... and does not open the URL</i>
</pre>


### `availability`: Find people's availability for meetings

This is useful for emailing people your availability. It only considers `accepted` meetings when determining busy/free.

<pre>
<%= run "help availability" %>
</pre>


For example: show me my available time over a chunk of time:

<pre>
<%= run "avail 2018-11-05..2018-11-07" %>
</pre>


You can also find times when multiple people are available:

<pre>
<%= run "avail 2018-11-05..2018-11-07 -a me@example.com,other@example.com" %>
</pre>


You can also set start and end times for the search, which is useful when looking for overlap with another time zone:

<pre>
<%= run "avail 2018-11-05..2018-11-07 -s 12pm -e 7pm" %>
</pre>


### `location-set`: Tell people where you are in the world

Declare your location as an all-day non-busy event:

<pre>
<%= run "help location-set" %>
</pre>

**Note** that you can only be in one place at a time, so existing location events may be modified or deleted when new overlapping events are created.

Some examples:

<pre>
<i># create an event titled `ðŸ—º WFH` for today</i>
<b>$</b> calendar-assistant location set -p home WFH
<b>Created:</b>
2018-09-03                | <b>ðŸ—º  WFH</b> (not-busy, self)

<i># create an event titled `ðŸ—º OOO` for tomorrow</i>
<b>$</b> calendar-assistant location-set OOO tomorrow
<b>Created:</b>
2018-09-04                | <b>ðŸ—º  OOO</b> (not-busy, self)

<i># create an event titled `ðŸ—º Spring One` on the days of that conference</i>
<b>$</b> calendar-assistant location-set "Spring One" 2018-09-24...2018-09-27
<b>Created:</b>
2018-09-24 - 2018-09-27   | <b>ðŸ—º  Spring One</b> (not-busy, self)

<i># create a vacation event for next week</i>
<b>$</b> calendar-assistant location-set "Vacation!" "next monday ... next week friday"
<b>Created:</b>
2018-09-10 - 2018-09-14   | <b>ðŸ—º  Vacation!</b> (not-busy, self)
</pre>


### `location`: View where you're going to be in the world

<pre>
<%= run "help location" %>
</pre>

For example:

<pre>
<%= run "location \"2018-09-24...2018-09-28\"" %>
</pre>


### `show`: View your calendar events

<pre>
<%= run "help show" %>
</pre>

For example: display all events scheduled for tomorrow:

<pre>
<%= run "show 2018-10-01" %>
</pre>

Display _only_ the commitments I have to other people using the `-c` option:

<pre>
<%= run "show -c 2018-10-01" %>
</pre>


### `lint`: Calendar events that require action

<pre>
<%= run "help lint" %>
</pre>

For example: display all events that require action scheduled for tomorrow:

<pre>
<%= run "lint 2018-10-01" %>
</pre>


### `config`: View your configuration parameters

Calendar Assistant has intelligent defaults, which can be overridden in the TOML file `~/.calendar-assistant`, and further overridden via command-line parameters. Sometimes it's nice to be able to see what defaults Calendar Assistant is using:

<pre>
<%= run "help config" %>
</pre>

The output is TOML, which is suitable for dumping into `~/.calendar-assistant` and editing.

<pre>
<%= run "config" %>
</pre>

### `interactive`: Interactive Console

<pre>
<%= run "help interactive" %>
</pre>

For example, check the version of calendar assistant

```
calendar-assistant> version
0.0.0
```

## Development

### Running Tests Locally

```bash
gem install bundler
bundle install

bundle exec rake spec     # Run all tests except feature tests
bundle exec rake features # Run only feature tests
bundle exec rake          # Default task runs both feature and non feature tests
```

**Note:** Feature tests are excluded by default in [.rspec](.rspec)


### Continuous Integration

CI is running in [Github Actions](https://github.com/flavorjones/calendar-assistant/actions/workflows/test-suite.yml).


### Code Quality

We're running [Code Climate](https://codeclimate.com/github/flavorjones/calendar-assistant) to monitor code quality and test coverage.


### Generate README

* Note that doing this requires npm to be installed
* Generation will use a fixture file rather than connecting to a remote calendar. Fixtures can be updated/regenerated in [generate-fixtures](generate-fixtures) script

```bash
./generate-readme
```


## References

Google Calendar Concepts: https://developers.google.com/calendar/concepts/

Google Calendar API Reference: https://developers.google.com/calendar/v3/reference/

Google Calendar Ruby Client Docs: https://www.rubydoc.info/github/google/google-api-ruby-client/Google/Apis/CalendarV3


## License

See files `LICENSE` and `NOTICE` in this repository.
