<%
require "faker"

EMAIL_REGEX = /[a-z]+@[a-z]+\.[a-z]+/

def obfuscate line
  if line =~ EMAIL_REGEX
    line.gsub(EMAIL_REGEX) { |match| Faker::Internet.email }
  elsif line =~ /ðŸ—º/
    line.gsub(/\|.*?</, "| ðŸ—º #{Faker::Hobbit.location} <")
  else
    line.gsub(/\|.*?</, "| #{Faker::Company.bs.capitalize} <")
  end
end

def run args
  output = []
  output << "<b>$</b> calendar-assistant #{args}" unless args =~ /\bhelp\b/
  output += `ruby -Ilib bin/calendar-assistant #{args} | node_modules/.bin/ansi-to-html`.split("\n")
  output.map {|line| obfuscate line }.join("\n")
end
%>
# calendar assistant

A command-line tool to help you manage your Google Calendar.

- easily join the videoconference for your current meeting
- see yours and others' "availability" suitable for an email response
- set up all-day events to let people know where you are (for frequent travelers)
- see views on your calendar events for a date or time range
- book (and re-book) one-on-ones and other meetings automatically

[![Concourse CI](https://ci.nokogiri.org/api/v1/teams/calendar-assistants/pipelines/calendar-assistant/jobs/rake-spec/badge)](https://ci.nokogiri.org/teams/calendar-assistants/pipelines/calendar-assistant)
[![Maintainability](https://api.codeclimate.com/v1/badges/3525792e1feeccfd8875/maintainability)](https://codeclimate.com/github/flavorjones/calendar-assistant/maintainability)


<!-- toc -->


## Features

### Pretty Display in Your Terminal

Events are nicely formatted, with faint strikeouts for events you've declined, and some additional attributes listed when present (e.g., "awaiting", "self", "not-busy", "1:1" ...)


### Human-Friendly Date and Time Specification

All dates and times are interpreted by [Chronic](https://github.com/mojombo/chronic) and so can be fuzzy terms like "tomorrow", "tuesday", "next thursday", and "two days from now" as well as specific dates and times.

For a date range or a datetime range, split the start and end with `..` or `...` (with or without spaces) like:

* "tomorrow ... three days from now"
* "2018-09-24..2018-09-27".

Also note that every command will adopt an intelligent default, which is generally "today" or "now".


### Human-Friendly Duration Specification

Some duration-related preferences are interpreted by [ChronicDuration](https://github.com/henrypoydar/chronic_duration) and so can be terms like "10m", "30 minutes", "four hours", etc.


### Preferences

All tokens and preferences will be stored in `~/.calendar-assistant` which is in TOML format for easy editing.


## Setup

### Installation

Install the gem: `gem install calendar-assistant`.


### Set up a Google Cloud Project with API access

<pre>
<%= run "help setup" %>
</pre>


### Authorize access to your Google Calendar

<pre>
<%= run "help authorize" %>
</pre>


## Commands

<pre>
<%= run "help" %>
</pre>


### Join a video call attached to a meeting

<pre>
<%= run "help join" %>
</pre>

Some examples:

<pre>
<b>$</b> calendar-assistant join
<i>me@example.com</i>

2018-10-01  11:30 - 12:00<b> | Facilitate customized web-readiness </b><i> (1:1, recurring)</i>

https://pivotal.zoom.us/j/ABC90210 <i># ... and opens the videoconference URL</i>


<b>$</b> calendar-assistant join work 11:30 --no-join 
<i>me@example.com</i>

2018-10-01  11:30 - 12:00<b> | Facilitate customized web-readiness </b><i> (1:1, recurring)</i>

https://pivotal.zoom.us/j/ABC90210 <i># ... and does not open the URL</i>
</pre>


### Find your availability for meetings

This is useful for emailing people your availability. It only considers `accepted` meetings when determining busy/free.

<pre>
<%= run "help availability" %>
</pre>


For example: show me my available time over a chunk of time:

<pre>
<%= run "avail 2018-11-05..2018-11-07" %>
</pre>


You can also find times when multiple people are available:

<pre>
<%= run "avail 2018-11-19 -a mdalessio@pivotal.io,mkocher@pivotal.io" %>
</pre>


You can also set start and end times for the search, which is useful when looking for overlap with another time zone:

<pre>
<%= run "avail 2018-11-05..2018-11-07 -s 12pm -e 7pm" %>
</pre>


### Tell people where you are at in the world

Declare your location as an all-day non-busy event:

<pre>
<%= run "help location-set" %>
</pre>

**Note** that you can only be in one place at a time, so existing location events may be modified or deleted when new overlapping events are created.

Some examples:

<pre>
<i># create an event titled `ðŸ—º WFH` for today</i>
<b>$</b> calendar-assistant location set -p home WFH
<b>Created:</b>
2018-09-03                | <b>ðŸ—º  WFH</b> (not-busy, self)

<i># create an event titled `ðŸ—º OOO` for tomorrow</i>
<b>$</b> calendar-assistant location-set OOO tomorrow
<b>Created:</b>
2018-09-04                | <b>ðŸ—º  OOO</b> (not-busy, self)

<i># create an event titled `ðŸ—º Spring One` on the days of that conference</i>
<b>$</b> calendar-assistant location-set "Spring One" 2018-09-24...2018-09-27
<b>Created:</b>
2018-09-24 - 2018-09-27   | <b>ðŸ—º  Spring One</b> (not-busy, self)

<i># create a vacation event for next week</i>
<b>$</b> calendar-assistant location-set "Vacation!" "next monday ... next week friday"
<b>Created:</b>
2018-09-10 - 2018-09-14   | <b>ðŸ—º  Vacation!</b> (not-busy, self)
</pre>


### Look up where you're going to be

<pre>
<%= run "help location" %>
</pre>

For example:

<pre>
<%= run "location \"2018-09-24...2018-09-28\"" %>
</pre>


### Display your calendar events

<pre>
<%= run "help show" %>
</pre>

For example: display all events scheduled for tomorrow:

<pre>
<%= run "show --profile=work 2018-10-01" %>
</pre>

Display _only_ the commitments I have to other people using the `-c` option:

<pre>
<%= run "show -c 2018-10-01" %>
</pre>


### View your configuration parameters

Calendar Assistant has intelligent defaults, which can be overridden in the TOML file `~/.calendar-assistant`, and further overridden via command-line parameters. Sometimes it's nice to be able to see what defaults Calendar Assistant is using:

<pre>
<%= run "help config" %>
</pre>

The output is TOML, which is suitable for dumping into `~/.calendar-assistant` and editing.

<pre>
<%= run "config" %>
</pre>


## References

Google Calendar Concepts: https://developers.google.com/calendar/concepts/

Google Calendar API Reference: https://developers.google.com/calendar/v3/reference/

Google Calendar Ruby Client Docs: https://www.rubydoc.info/github/google/google-api-ruby-client/Google/Apis/CalendarV3


## License

See files `LICENSE` and `NOTICE` in this repository.
